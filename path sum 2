//OPTIMIZED SOLUTION - USING BACKTRACKING

class Solution {
    List<List<Integer>> result;
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        result = new ArrayList<>();
        //null
        if(root == null) return result;
        helper(root, 0, new ArrayList<>(), targetSum);
        return result;
    }
    private void helper(TreeNode root, int currSum, List<Integer> path, int target){
        //base
        if(root == null) {
            
            return;
             }
        //logic

        currSum += root.val;
        //ACTION
        path.add(root.val);
        
        
           if(root.left == null && root.right == null){
      
            if(currSum == target){
                result.add(new ArrayList<>(path));
                System.out.println(path);
            }
        }
        //RECURSE
        helper(root.left, currSum, path, target);
        helper(root.right, currSum, path, target);

        //BACKTRACK
        path.remove(path.size() - 1);
       
    }
}






TC = o(n^2) SC = O(n^2)
class Solution {
    List<List<Integer>> result;
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        result = new ArrayList<>();
        //null
        if(root == null) return result;
        helper(root, 0, new ArrayList<>(), targetSum);
        return result;
    }
    private void helper(TreeNode root, int currSum, List<Integer> path, int target){
        //base
        if(root == null) {
            
            return;
             }
        //logic

        currSum += root.val;
        path.add(root.val);
        //left
        helper(root.left, currSum, new ArrayList<> (path), target);
        //st.pop()
           if(root.left == null && root.right == null){
      
            if(currSum == target){
                result.add(path);
                System.out.println(path);
            }
        }

    
        helper(root.right, currSum, new ArrayList<> (path), target);
       
    }
}
